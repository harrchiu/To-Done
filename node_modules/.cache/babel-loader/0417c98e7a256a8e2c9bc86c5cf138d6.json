{"ast":null,"code":"import _toConsumableArray from\"/Users/henry/Desktop/GitHub/todoList-1/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Form=function Form(_ref){var setInputText=_ref.setInputText,inputText=_ref.inputText,todos=_ref.todos,setTodos=_ref.setTodos,status=_ref.status,setStatus=_ref.setStatus;// we define a bunch of handlers (one for submitting, deleting, etc.)\n// then call it when the appropriate action is done\nvar inputTextHandler=function inputTextHandler(e){console.log(e.target.value);setInputText(e.target.value);};var submitTodoHandler=function submitTodoHandler(e){e.preventDefault();// stop the page from refreshing\n// you'd be able to see this if you commented it out\nif(inputText===\"\"){// stop null entries\nreturn;}// use the current text, append to todos list\nsetTodos([].concat(_toConsumableArray(todos),[{text:inputText,completed:false,id:Math.random()*1000}]));setInputText(\"\");// clear the input text\n};var statusHandler=function statusHandler(e){setStatus(e.target.value);};return/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsx(\"input\",{value:inputText,onChange:inputTextHandler,type:\"text\",className:\"todo-input\"}),/*#__PURE__*/_jsx(\"button\",{onClick:submitTodoHandler,className:\"todo-button\",type:\"submit\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-plus-square\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"select\",children:/*#__PURE__*/_jsxs(\"select\",{onChange:statusHandler,name:\"todos\",className:\"filter-todo\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"All\"}),/*#__PURE__*/_jsx(\"option\",{value:\"completed\",children:\"Completed\"}),/*#__PURE__*/_jsx(\"option\",{value:\"uncompleted\",children:\"Uncompleted\"})]})})]});};export default Form;// same as \n// Function Form(){\n//\n//}","map":{"version":3,"sources":["/Users/henry/Desktop/GitHub/todoList-1/src/components/Form.js"],"names":["React","Form","setInputText","inputText","todos","setTodos","status","setStatus","inputTextHandler","e","console","log","target","value","submitTodoHandler","preventDefault","text","completed","id","Math","random","statusHandler"],"mappings":"iIAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,wFACA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAAgE,IAA7DC,CAAAA,YAA6D,MAA7DA,YAA6D,CAAhDC,SAAgD,MAAhDA,SAAgD,CAAtCC,KAAsC,MAAtCA,KAAsC,CAAhCC,QAAgC,MAAhCA,QAAgC,CAAvBC,MAAuB,MAAvBA,MAAuB,CAAhBC,SAAgB,MAAhBA,SAAgB,CAE3E;AACA;AAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,CAAD,CAAO,CAC9BC,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAArB,EACAX,YAAY,CAACO,CAAC,CAACG,MAAF,CAASC,KAAV,CAAZ,CACD,CAHD,CAIA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACL,CAAD,CAAO,CAE/BA,CAAC,CAACM,cAAF,GAAsB;AACA;AACtB,GAAIZ,SAAS,GAAK,EAAlB,CAAqB,CAAG;AACtB,OACD,CAED;AACAE,QAAQ,8BACHD,KADG,GACI,CAACY,IAAI,CAAEb,SAAP,CAAkBc,SAAS,CAAE,KAA7B,CAAoCC,EAAE,CAACC,IAAI,CAACC,MAAL,GAAc,IAArD,CADJ,GAAR,CAGAlB,YAAY,CAAC,EAAD,CAAZ,CAAoB;AACrB,CAbD,CAeA,GAAMmB,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACZ,CAAD,CAAO,CAC3BF,SAAS,CAACE,CAAC,CAACG,MAAF,CAASC,KAAV,CAAT,CACD,CAFD,CAIA,mBACE,qCACE,cAAO,KAAK,CAAEV,SAAd,CAAyB,QAAQ,CAAEK,gBAAnC,CAAqD,IAAI,CAAC,MAA1D,CAAiE,SAAS,CAAC,YAA3E,EADF,cAGE,eAAQ,OAAO,CAAEM,iBAAjB,CAAoC,SAAS,CAAC,aAA9C,CAA4D,IAAI,CAAC,QAAjE,uBACE,UAAG,SAAS,CAAC,oBAAb,EADF,EAHF,cAOE,YAAK,SAAS,CAAC,QAAf,uBACE,gBAAQ,QAAQ,CAAEO,aAAlB,CAAiC,IAAI,CAAC,OAAtC,CAA8C,SAAS,CAAC,aAAxD,wBACE,eAAQ,KAAK,CAAC,KAAd,iBADF,cAEE,eAAQ,KAAK,CAAC,WAAd,uBAFF,cAGE,eAAQ,KAAK,CAAC,aAAd,yBAHF,GADF,EAPF,GADF,CAiBD,CA7CD,CA+CA,cAAepB,CAAAA,IAAf,CACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nconst Form = ({ setInputText,inputText,todos,setTodos,status,setStatus }) => {\n\n  // we define a bunch of handlers (one for submitting, deleting, etc.)\n  // then call it when the appropriate action is done\n\n  const inputTextHandler = (e) => {\n    console.log(e.target.value);\n    setInputText(e.target.value);\n  };\n  const submitTodoHandler = (e) => {\n\n    e.preventDefault();   // stop the page from refreshing\n                          // you'd be able to see this if you commented it out\n    if (inputText === \"\"){  // stop null entries\n      return;\n    }\n\n    // use the current text, append to todos list\n    setTodos([\n      ...todos, {text: inputText, completed: false, id:Math.random()*1000 }\n    ]);\n    setInputText(\"\");   // clear the input text\n  };\n\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  }\n\n  return (\n    <form>\n      <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\"/>\n      \n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n\n      <div className=\"select\">\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n}\n\nexport default Form;\n// same as \n// Function Form(){\n//\n//} "]},"metadata":{},"sourceType":"module"}