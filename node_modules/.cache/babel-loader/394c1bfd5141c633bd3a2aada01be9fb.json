{"ast":null,"code":"var _jsxFileName = \"/Users/henry/Desktop/GitHub/todoList-1/src/components/Form.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = ({\n  setInputText,\n  inputText,\n  todos,\n  setTodos,\n  status,\n  setStatus\n}) => {\n  // we define a bunch of handlers (one for submitting, deleting, etc.)\n  // then call it when the appr\n  const inputTextHandler = e => {\n    console.log(e.target.value);\n    setInputText(e.target.value);\n  };\n\n  const submitTodoHandler = e => {\n    e.preventDefault(); // stop the page from refreshing\n    // you'd be able to see this if you commented it out\n    //\n\n    if (inputText === \"\") {\n      // stop null entries\n      return;\n    } // use the current text, append to todos list\n\n\n    setTodos([...todos, {\n      text: inputText,\n      completed: false,\n      id: Math.random() * 1000\n    }]);\n    setInputText(\"\"); // clear the input text\n  };\n\n  const statusHandler = e => {\n    setStatus(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputText,\n      onChange: inputTextHandler,\n      type: \"text\",\n      className: \"todo-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitTodoHandler,\n      className: \"todo-button\",\n      type: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-plus-square\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: statusHandler,\n        name: \"todos\",\n        className: \"filter-todo\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"completed\",\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"uncompleted\",\n          children: \"Uncompleted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Form;\nexport default Form; // same as \n// Function Form(){\n//\n//} \n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/henry/Desktop/GitHub/todoList-1/src/components/Form.js"],"names":["React","Form","setInputText","inputText","todos","setTodos","status","setStatus","inputTextHandler","e","console","log","target","value","submitTodoHandler","preventDefault","text","completed","id","Math","random","statusHandler"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAeC,EAAAA,SAAf;AAAyBC,EAAAA,KAAzB;AAA+BC,EAAAA,QAA/B;AAAwCC,EAAAA,MAAxC;AAA+CC,EAAAA;AAA/C,CAAD,KAAgE;AAE3E;AACA;AAEA,QAAMC,gBAAgB,GAAIC,CAAD,IAAO;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAArB;AACAX,IAAAA,YAAY,CAACO,CAAC,CAACG,MAAF,CAASC,KAAV,CAAZ;AACD,GAHD;;AAIA,QAAMC,iBAAiB,GAAIL,CAAD,IAAO;AAE/BA,IAAAA,CAAC,CAACM,cAAF,GAF+B,CAET;AACA;AACtB;;AACA,QAAIZ,SAAS,KAAK,EAAlB,EAAqB;AAAG;AACtB;AACD,KAP8B,CAS/B;;;AACAE,IAAAA,QAAQ,CAAC,CACP,GAAGD,KADI,EACG;AAACY,MAAAA,IAAI,EAAEb,SAAP;AAAkBc,MAAAA,SAAS,EAAE,KAA7B;AAAoCC,MAAAA,EAAE,EAACC,IAAI,CAACC,MAAL,KAAc;AAArD,KADH,CAAD,CAAR;AAGAlB,IAAAA,YAAY,CAAC,EAAD,CAAZ,CAb+B,CAaX;AACrB,GAdD;;AAeA,QAAMmB,aAAa,GAAIZ,CAAD,IAAO;AAC3BF,IAAAA,SAAS,CAACE,CAAC,CAACG,MAAF,CAASC,KAAV,CAAT;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAO,MAAA,KAAK,EAAEV,SAAd;AAAyB,MAAA,QAAQ,EAAEK,gBAAnC;AAAqD,MAAA,IAAI,EAAC,MAA1D;AAAiE,MAAA,SAAS,EAAC;AAA3E;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEM,iBAAjB;AAAoC,MAAA,SAAS,EAAC,aAA9C;AAA4D,MAAA,IAAI,EAAC,QAAjE;AAAA,6BACE;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAEO,aAAlB;AAAiC,QAAA,IAAI,EAAC,OAAtC;AAA8C,QAAA,SAAS,EAAC,aAAxD;AAAA,gCACE;AAAQ,UAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA3CD;;KAAMpB,I;AA6CN,eAAeA,IAAf,C,CACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nconst Form = ({ setInputText,inputText,todos,setTodos,status,setStatus }) => {\n\n  // we define a bunch of handlers (one for submitting, deleting, etc.)\n  // then call it when the appr\n\n  const inputTextHandler = (e) => {\n    console.log(e.target.value);\n    setInputText(e.target.value);\n  };\n  const submitTodoHandler = (e) => {\n\n    e.preventDefault();   // stop the page from refreshing\n                          // you'd be able to see this if you commented it out\n    //\n    if (inputText === \"\"){  // stop null entries\n      return;\n    }\n\n    // use the current text, append to todos list\n    setTodos([\n      ...todos, {text: inputText, completed: false, id:Math.random()*1000 }\n    ]);\n    setInputText(\"\");   // clear the input text\n  };\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  }\n\n  return (\n    <form>\n      <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\"/>\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n      <div className=\"select\">\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n}\n\nexport default Form;\n// same as \n// Function Form(){\n//\n//} "]},"metadata":{},"sourceType":"module"}